package  {		import flash.display.MovieClip;	import flash.display.Sprite;	import flash.media.Sound;	import flash.net.URLRequest;	import flash.events.Event;	import flash.events.MouseEvent;		public class Tower1 extends MovieClip {				protected var reloadTime:Number = 5;		protected var bulletSpeed:Number = 10;		protected var disorder:Number = 0.1;		protected var soundShot:Sound = new SoundCQB;		protected var soundHit:Sound = new SoundM4;				private var reload:Number;		private var rotateSpeed:Number = 3;		public var target:Tower1;		public var life:Number = 100;		public var lifeD:Sprite;				public var bullets:Array = new Array();				private var soundNew:Sound = new SoundReload;						public function Tower1(x:Number,y:Number):void {			this.x=x;			this.y=y;			soundNew.play();						reload = reloadTime;			this.lifeD = new Sprite();;			this.addChild(lifeD);			lifeD.graphics.lineStyle(0,0x00ff00);			lifeD.graphics.beginFill(0x00FF00);			lifeD.graphics.drawRect(0,0,20,2);			lifeD.graphics.endFill();			lifeD.x = -10;			lifeD.y = 5;			addEventListener(Event.ENTER_FRAME, move);			addEventListener(MouseEvent.MOUSE_UP,onMouseUp, false, 0, true);			addEventListener(MouseEvent.MOUSE_DOWN,onMouseDown, false, 0, true);		}		private function onMouseDown(event:MouseEvent):void {			startDrag(false);			}		private function onMouseUp(event:MouseEvent):void {			stopDrag();			}				public function rotateTo(x:int, y:int):void {			this.rotation = Math.atan2(y-this.y,x-this.x)/Math.PI*180+90;		}				public function rotateToTarget():Boolean {			var alfa:Number = Math.atan2(target.y-this.y,target.x-this.x)/Math.PI*180+90;						if ((alfa-this.rotation)>180) {	alfa=alfa-360;	}			if ((alfa-this.rotation)<-180) {alfa=alfa+360;	}						if (alfa-this.rotation<-rotateSpeed) {				this.rotation-=this.rotateSpeed;				return true;			}			if (alfa-this.rotation>+rotateSpeed) {				this.rotation+=this.rotateSpeed;				return true;			} 						this.rotation = alfa;			this.shut();			return false;		}				public function move(event:Event):void {						if (this.target is Tower1 && target!=undefined)				rotateToTarget();			else				findTarget();							for(var i in bullets){				if (!bullets[i].move(target)){					bullets[i] = bullets[bullets.length-1];					bullets.pop();				}			}		}		public function findTarget():void {			if((stage == null)) {this.target = null; return;}						var childQuantity:uint = stage.numChildren;			var neerestDistance: Number = 1000;			for(var j:int = 0; j< childQuantity; j++) {				var child:* = stage.getChildAt(j);				if (!(child is Tower1)||(child === this)) 					continue;				var dist:Number = Math.sqrt((this.x-child.x)*(this.x-child.x)+(this.y-child.y)*(this.y-child.y))								if (dist<neerestDistance){					neerestDistance = dist;					this.target = child;					}									}							if (neerestDistance == 1000)				this.target = null;		}				public function shut():void{			if (--this.reload>0) return;			this.reload = reloadTime+Math.random()*3;			this.soundShot.play();			var alfa:Number = (this.rotation-90)/180*Math.PI+Math.random()*disorder*2-disorder;				var bullet:Bullet = new Bullet(x,y,alfa, bulletSpeed);			bullets.push(bullet);			stage.addChild(bullet);					}				public function getHit(x:Number, y:Number):* {			//soundHit.play();			//trace(Math.sqrt(y*y+x*x));			life-=Math.sqrt(y*y+x*x);			lifeD.width=life/5;			this.x+=x/20;			this.y+=y/20;			if (life<1) {				stage.removeChild(this);				this=null;			}			return this;		}			}	}